#include "bullet.h"
#include <QTimer>
#include <QDebug>
#include <QGraphicsScene>
#include <QList>
#include "enemy.h"
#include "game.h"

extern Game* game;

Bullet::Bullet(){
    // drew the rect
    setRect(0,0,10,50);

    // connect
    QTimer * timer = new QTimer();
    connect(timer,SIGNAL(timeout()),this,SLOT(move()));

    timer->start(50);
}

void Bullet::move(){
    // if bullet collides witm enemy, destroy both
    /* How do I check what the bullet is colliding with?
     * Every item has member function which calls colliding items-
     * which returns a list of all the items that are colliding witm calling object
     */
    QList<QGraphicsItem*> colliding_items = collidingItems();
    // this member function will return
    // a list of pointers to all the QGraphics Items that the calling object is actually colliding with

    /* This basically houses all the items that this bullet is collidng wtm right now
     * The plan is to treverse this list and find out if the bullet is colliding with an enemy. */

    for (int i=0, n=colliding_items.size(); i<n; ++i){
        //if (typeid()) // if the type of (this object that we're corrently traversing) and the way we get that object is we have to
            // dereferance the pointer (which pointer? - the current pointer.)
            // => so *(colliding_items(i))
        // and I want to check if that type ID is equal to an enemy
        if (typeid(*(colliding_items[i])) == typeid (Enemy)){
            game->score->increase();
            //remove them both

            scene()->removeItem(colliding_items[i]); // remove the enemy first
            scene()->removeItem(this);

            // and then remove also the bullet

            /* once I remove it from the scene, these objects are still occupying memory on the heap in order to free that memory-
             * I have to actually delete that object on the heap */

            // delete them both
            delete colliding_items[i];
            delete this;
            return;
        }
    }

    // move bullet up
    setPos(x(),y()-10);
    // checking if the bullet is off the screen and deleting( if it is)
    if (pos().y()+rect().height() < 0){
        scene()->removeItem(this);
        qDebug() << "bullet deleted";
    }
}
